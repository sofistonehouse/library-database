/*
 * CheckoutDetailsCard.java
 */

package library.gui;
import java.awt.event.KeyEvent;
import library.controller.CheckoutUseCase;
import library.model.LibraryDatabase;
import library.model.Copy;
import library.model.Patron;

/** The card that manages the details of building a list of copies to check out
 *  to a patron.  It is shown when a (valid) patron is entered in the Checkout
 *  tab of the main card
 *
 * @author  Russell C. Bjork
 * 
 * MODIFIED BY:
 */
public class CheckoutDetailsCard extends javax.swing.JPanel 
{	
    /** Constructor - to be used only by the GUI
     */
    CheckoutDetailsCard() 
    {
        initComponents();
        theInstance = this;
    }
    
    /** Get the one and only instance of this class (which was created by
     *  the GUI)
     * 
     *  @return the instance
     */
    public static CheckoutDetailsCard getInstance()
    {
        return theInstance;
    }
    
    /** Set the controller that will be used to perform operations requested
     *	by this card
     *	
     *	@param use case the controller code that handles operations for this card
     */
    public void setUseCase(CheckoutUseCase usecase)
    {
    	this.useCase = usecase;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patronNameLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        callNumberField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        copyNumberField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        clearAllButton = new javax.swing.JButton();
        addCopyButton = new javax.swing.JButton();
        removeCopyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        copiesList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        checkoutAllButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        copiesOutLabel = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        patronNameLabel.setLabelFor(this);
        patronNameLabel.setText("Checking Out to:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 10, 30);
        add(patronNameLabel, gridBagConstraints);
        patronNameLabel.getAccessibleContext().setAccessibleName("The name of the patron we are checking out to");
        patronNameLabel.getAccessibleContext().setAccessibleDescription("The name of the patron we are checking out to");

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setLabelFor(callNumberField);
        jLabel3.setText("Call Number");
        jPanel1.add(jLabel3, new java.awt.GridBagConstraints());

        callNumberField.setColumns(20);
        callNumberField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                callNumberFieldCaretUpdate(evt);
            }
        });
        callNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callNumberFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(callNumberField, gridBagConstraints);

        jLabel2.setText("Copy Number");
        jPanel1.add(jLabel2, new java.awt.GridBagConstraints());

        copyNumberField.setColumns(5);
        copyNumberField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                copyNumberFieldCaretUpdate(evt);
            }
        });
        copyNumberField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyNumberFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(copyNumberField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        add(jPanel1, gridBagConstraints);

        clearAllButton.setText("Clear All Copies");
        clearAllButton.setEnabled(false);
        clearAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAllButtonActionPerformed(evt);
            }
        });
        clearAllButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clearAllButtonKeyTyped(evt);
            }
        });
        jPanel2.add(clearAllButton);

        addCopyButton.setText("Add Above Copy");
        addCopyButton.setEnabled(false);
        addCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCopyButtonActionPerformed(evt);
            }
        });
        addCopyButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addCopyButtonKeyTyped(evt);
            }
        });
        jPanel2.add(addCopyButton);

        removeCopyButton.setText("Remove Copy");
        removeCopyButton.setEnabled(false);
        removeCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCopyButtonActionPerformed(evt);
            }
        });
        removeCopyButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                removeCopyButtonKeyTyped(evt);
            }
        });
        jPanel2.add(removeCopyButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 30);
        add(jPanel2, gridBagConstraints);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        copiesList.setModel(copiesListModel);
        copiesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                copiesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(copiesList);
        copiesList.getAccessibleContext().setAccessibleName("List of copies to be rented");
        copiesList.getAccessibleContext().setAccessibleDescription("List of copies to be rented");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 10, 30);
        add(jScrollPane1, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cancelButtonKeyTyped(evt);
            }
        });
        jPanel3.add(cancelButton);

        checkoutAllButton.setText("Check Out All Copies");
        checkoutAllButton.setEnabled(false);
        checkoutAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutAllButtonActionPerformed(evt);
            }
        });
        checkoutAllButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                checkoutAllButtonKeyTyped(evt);
            }
        });
        jPanel3.add(checkoutAllButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 29, 30);
        add(jPanel3, gridBagConstraints);

        jLabel1.setLabelFor(copiesList);
        jLabel1.setText("Copies to be checked out");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        add(jLabel1, gridBagConstraints);

        copiesOutLabel.setText("Copies currently out:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(copiesOutLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    /** This method is called each time the card is shown.  It clears out
        various components, and then gives focus to the copy field */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        callNumberField.setText("");
        copyNumberField.setText("");
        copiesListModel.clear();
        clearAllButton.setEnabled(false);
        addCopyButton.setEnabled(false);
        removeCopyButton.setEnabled(false);
        checkoutAllButton.setEnabled(false);
        callNumberField.requestFocus();
        Patron patron = useCase.getPatron();
        patronNameLabel.setText("Checking out to: " + patron.getFullName());
        int copiesOut = patron.getCurrentCopiesOut();
        if (copiesOut > 0)
            copiesOutLabel.setText("Copies currently out: " + copiesOut + " (" +
                patron.getNumberOverdue() + " overdue)");
        else
            copiesOutLabel.setText("Copies currently out: 0");
    }//GEN-LAST:event_formComponentShown

    /** Enable the add copy button just when the copy field is non-empty */
    private void callNumberFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_callNumberFieldCaretUpdate
        addCopyButton.setEnabled(callNumberField.getText().length() != 0);
    }//GEN-LAST:event_callNumberFieldCaretUpdate

    /** Make pressing return in the copy field equivalent to clicking the add copy button */
    private void callNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callNumberFieldActionPerformed
        if (addCopyButton.isEnabled())
            addCopyButtonActionPerformed(evt);
    }//GEN-LAST:event_callNumberFieldActionPerformed

    /** Add a newly-entered copy to the list of copies to be rented */
    private void addCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCopyButtonActionPerformed
        try {
            String callNumber = callNumberField.getText();
            int copyNumber = copyNumberField.getText().length() == 0 
                            ? 1
                            : Integer.parseInt(copyNumberField.getText());
                       
            Copy copy = LibraryDatabase.getInstance().getCopy(
                                        callNumber, copyNumber);
            useCase.addCopy(copy);
            // The following will not be done if the controller throws an 
            // exception because the copy entered is bad
            copiesListModel.addElement(copy.getItem().getCallNumber() + " " +
                    copy.getCopyNumber() + " " + copy.getItem().getDescription() + " " +
                    copy.getDateWillBeDue());
            clearAllButton.setEnabled(true);
            checkoutAllButton.setEnabled(true);
        }
        catch(IllegalArgumentException e) {
            GUI.getInstance().showMessage(e.getMessage());
        }
        callNumberField.setText("");
        copyNumberField.setText("");
        callNumberField.requestFocus();
        addCopyButton.setEnabled(false);
    }//GEN-LAST:event_addCopyButtonActionPerformed

    /** Enable the remove copy button just when a copy is selected in the list */
    private void copiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_copiesListValueChanged
        int index = copiesList.getSelectedIndex();
        removeCopyButton.setEnabled(index >= 0);
    }//GEN-LAST:event_copiesListValueChanged

    /** Remove an copy from the list of copies to be rented */
    private void removeCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCopyButtonActionPerformed
        int index = copiesList.getSelectedIndex();
        useCase.removeCopy(index);
        copiesListModel.remove(index);
        if (copiesListModel.getSize() == 0) {
            clearAllButton.setEnabled(false);
            checkoutAllButton.setEnabled(false);
        }
        callNumberField.requestFocus();
    }//GEN-LAST:event_removeCopyButtonActionPerformed

    /** Clear all copies from the list of copies to be rented */
    private void clearAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAllButtonActionPerformed
        useCase.clearCopies();
        copiesListModel.clear();
        clearAllButton.setEnabled(false);
        checkoutAllButton.setEnabled(false);
        callNumberField.requestFocus();
    }//GEN-LAST:event_clearAllButtonActionPerformed

    /** Rent all copies in the list of copies to be rented to the patron */
    private void checkoutAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutAllButtonActionPerformed
        useCase.checkoutCopies();
        GUI.getInstance().goBack();
    }//GEN-LAST:event_checkoutAllButtonActionPerformed

    /** Cancel renting to this patron */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        GUI.getInstance().goBack();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void clearAllButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clearAllButtonKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER)
            clearAllButtonActionPerformed(null);
    }//GEN-LAST:event_clearAllButtonKeyTyped

    private void addCopyButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addCopyButtonKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER)
            addCopyButtonActionPerformed(null);

    }//GEN-LAST:event_addCopyButtonKeyTyped

    private void removeCopyButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_removeCopyButtonKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER)
            removeCopyButtonActionPerformed(null);

    }//GEN-LAST:event_removeCopyButtonKeyTyped

    private void cancelButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cancelButtonKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER)
            cancelButtonActionPerformed(null);

    }//GEN-LAST:event_cancelButtonKeyTyped

    private void checkoutAllButtonKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_checkoutAllButtonKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER)
            checkoutAllButtonActionPerformed(null);
    }//GEN-LAST:event_checkoutAllButtonKeyTyped

    private void copyNumberFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyNumberFieldActionPerformed
        if (addCopyButton.isEnabled())
            addCopyButtonActionPerformed(evt);
    }//GEN-LAST:event_copyNumberFieldActionPerformed

    private void copyNumberFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_copyNumberFieldCaretUpdate
        addCopyButton.setEnabled(callNumberField.getText().length() != 0);
    }//GEN-LAST:event_copyNumberFieldCaretUpdate
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton addCopyButton;
    private javax.swing.JTextField callNumberField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton checkoutAllButton;
    private javax.swing.JButton clearAllButton;
    private javax.swing.JList<String> copiesList;
    private javax.swing.JLabel copiesOutLabel;
    private javax.swing.JTextField copyNumberField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel patronNameLabel;
    private javax.swing.JButton removeCopyButton;
    // End of variables declaration                       

    private static CheckoutDetailsCard theInstance;
    private CheckoutUseCase useCase;
    
    // The model used for the displayed list of copies.  The display includes 
    // the copy id and title
    private javax.swing.DefaultListModel<String> copiesListModel = 
                new javax.swing.DefaultListModel<String>();
}
