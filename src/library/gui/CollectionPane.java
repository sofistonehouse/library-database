/*
 * CollectionPane.java 
 */

package library.gui;
import library.controller.LoginOutUseCase;
import library.model.Item;
import library.model.LibraryDatabase;
import library.model.Copy;
import library.controller.ItemUseCase;
import java.util.Observer;
import java.util.Observable;

/** The pane associated with the "Collection" tab on the main card of the GUI
 *
 * @author Russell C. Bjork
 * 
 * MODIFIED BY: Jason Asonye, Mya Randolph, Daniel Lovelace, Sofi Stonehouse
 */
public class CollectionPane extends javax.swing.JPanel implements Observer 
{
    /** Creates new form CollectionPane 
     */
    CollectionPane() 
    {
        LoginOutUseCase.getInstance().addObserver(this);
        initComponents();
        statusButton.setVisible(false);
        reserveButton.setVisible(false);
        itemsList.setModel(LibraryDatabase.getInstance().getItemsModel());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        paneLabel = new javax.swing.JLabel();
        addBookButton = new javax.swing.JButton();
        addDVDButton = new javax.swing.JButton();
        addCopyButton = new javax.swing.JButton();
        itemsListScrollPane = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList<>();
        statusButton = new javax.swing.JButton();
        reserveButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        paneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        paneLabel.setText("Items");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.ipadx = 365;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(paneLabel, gridBagConstraints);
        paneLabel.getAccessibleContext().setAccessibleDescription("This is the Inventory pane.  Remove this label!");

        addBookButton.setText("Add Book");
        addBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        add(addBookButton, gridBagConstraints);

        addDVDButton.setText("Add DVD");
        addDVDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDVDButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(addDVDButton, gridBagConstraints);

        addCopyButton.setText("Add Copy");
        addCopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCopyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        add(addCopyButton, gridBagConstraints);

        itemsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                itemsListValueChanged(evt);
            }
        });
        itemsListScrollPane.setViewportView(itemsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(itemsListScrollPane, gridBagConstraints);

        statusButton.setText("Item Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(statusButton, gridBagConstraints);

        reserveButton.setText("Reserve");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(reserveButton, gridBagConstraints);

        reportButton.setText("Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(reportButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        addBookButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
        addDVDButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
        addCopyButton.setEnabled(false);
        statusButton.setEnabled(false);
        reserveButton.setEnabled(false);
        reportButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
    }//GEN-LAST:event_formComponentShown

    private void itemsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_itemsListValueChanged
        addCopyButton.setEnabled(itemsList.getSelectedValue() != null &&
                LoginOutUseCase.getInstance().isManagerLoggedIn());
        statusButton.setEnabled(itemsList.getSelectedValue() != null);
        reserveButton.setEnabled(itemsList.getSelectedValue() != null);
    }//GEN-LAST:event_itemsListValueChanged

    private void addBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookButtonActionPerformed
        GUI.getInstance().gotoCard("bookdetails");
    }//GEN-LAST:event_addBookButtonActionPerformed

    private void addCopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCopyButtonActionPerformed
        Item item = itemsList.getSelectedValue();
        if (item != null)
        {
            ItemUseCase.addCopy(item);
//** STUDENTS: ADD CODE HERE TO CALL THE CONTROLLER MEDTHOD THAT PERFORMS
//** THE USE CASE AND THEN SHOW THE INFORMATION ABOUT THE NEWLY ADDED COPY
//** - THEN REMOVE THESE COMMENT LINES!
        }
    }//GEN-LAST:event_addCopyButtonActionPerformed

    private void addDVDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDVDButtonActionPerformed
        GUI.getInstance().gotoCard("dvddetails");
    }//GEN-LAST:event_addDVDButtonActionPerformed

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        ItemUseCase.produceReport();
    }//GEN-LAST:event_reportButtonActionPerformed
    
    /** Update button enables when manager login status changes
     * 
     *  @param observable the LoginOutUseCase object
     *  @param arg argument if any included in notification
     */
    public void update(Observable observable, Object arg)
    {
        addBookButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
        addDVDButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
        addCopyButton.setEnabled(itemsList.getSelectedValue() != null &&
                LoginOutUseCase.getInstance().isManagerLoggedIn());       
        reportButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBookButton;
    private javax.swing.JButton addCopyButton;
    private javax.swing.JButton addDVDButton;
    private javax.swing.JList<Item> itemsList;
    private javax.swing.JScrollPane itemsListScrollPane;
    private javax.swing.JLabel paneLabel;
    private javax.swing.JButton reportButton;
    private javax.swing.JButton reserveButton;
    private javax.swing.JButton statusButton;
    // End of variables declaration//GEN-END:variables
    
}
