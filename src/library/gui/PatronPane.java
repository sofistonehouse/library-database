/*
 * PatronPane.java
 */

package library.gui;

import library.model.Patron;
import library.model.LibraryDatabase;
import library.controller.LoginOutUseCase;
import library.controller.PatronUseCase;
import java.util.Observer;
import java.util.Observable;

/** The pane associated with the "Patron" tab on the main card of the GUI
 *
 * @author Russell C. Bjork
 * 
 * MODIFIED BY: Sofi Stonehouse, Dan Lovelace, Mya Randolph, Jason Asonye
 */
public class PatronPane extends javax.swing.JPanel implements Observer
{
    
    /** Creates new form PatronPane  
     */
    PatronPane() 
    {
        LoginOutUseCase.getInstance().addObserver(this);
        initComponents();
        finesButton.setVisible(false);
        deleteButton.setVisible(false);
        patronsList.setModel(LibraryDatabase.getInstance().getPatronsModel());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        paneLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        patronsListScrollPane = new javax.swing.JScrollPane();
        patronsList = new javax.swing.JList<>();
        finesButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        reportButton = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        paneLabel.setText("Patrons");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(paneLabel, gridBagConstraints);
        paneLabel.getAccessibleContext().setAccessibleDescription("This is the Patrons pane.  Remove this label!");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(addButton, gridBagConstraints);

        patronsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                patronsListValueChanged(evt);
            }
        });
        patronsListScrollPane.setViewportView(patronsList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(patronsListScrollPane, gridBagConstraints);

        finesButton.setText("Pay Fines");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(finesButton, gridBagConstraints);

        deleteButton.setText("Delete");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(deleteButton, gridBagConstraints);

        reportButton.setText("Report");
        reportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(reportButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void patronsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_patronsListValueChanged
        deleteButton.setEnabled(patronsList.getSelectedValue() != null &&
                LoginOutUseCase.getInstance().isManagerLoggedIn());
        finesButton.setEnabled(patronsList.getSelectedValue() != null);
    }//GEN-LAST:event_patronsListValueChanged

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        GUI.getInstance().gotoCard("patrondetails");
    }//GEN-LAST:event_addButtonActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        deleteButton.setEnabled(false);
        finesButton.setEnabled(false);
        reportButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
    }//GEN-LAST:event_formComponentShown

    private void reportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportButtonActionPerformed
        PatronUseCase.produceReport();
    }//GEN-LAST:event_reportButtonActionPerformed
    
     /** Update button enables when manager login status changes
     * 
     *  @param observable the LoginOutUseCase object
     *  @param arg argument if any included in notification
     */
    public void update(Observable observable, Object arg)
    {
        deleteButton.setEnabled(patronsList.getSelectedValue() != null &&
                LoginOutUseCase.getInstance().isManagerLoggedIn());
        reportButton.setEnabled(LoginOutUseCase.getInstance().isManagerLoggedIn());
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton finesButton;
    private javax.swing.JLabel paneLabel;
    private javax.swing.JList<Patron> patronsList;
    private javax.swing.JScrollPane patronsListScrollPane;
    private javax.swing.JButton reportButton;
    // End of variables declaration//GEN-END:variables
    
}
