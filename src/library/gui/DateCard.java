/*
 * DateCard.java
 */

package library.gui;
import library.model.SimpleDate;

/** The card that supports "diddling" with today's date
 *
 * @author Russell C. Bjork
 */
public class DateCard extends javax.swing.JPanel 
{    
    /**
     * Creates new form DateCard
     * 
     *  @param gui the gui that this pane is displayed in
     */
    DateCard() 
    {
        initComponents();
 
        // Start threads that will repeatedly press buttons if the user holds
        // them down
        forwardThread.start();
        backwardThread.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        forwardButton = new javax.swing.JButton();
        backwardButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        doneButton = new javax.swing.JButton();
        todayField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        add(jLabel1, gridBagConstraints);

        forwardButton.setText("^");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });
        forwardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                forwardButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                forwardButtonMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(forwardButton, gridBagConstraints);
        forwardButton.getAccessibleContext().setAccessibleName("Go forward time");

        backwardButton.setText("v");
        backwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardButtonActionPerformed(evt);
            }
        });
        backwardButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                backwardButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                backwardButtonMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(backwardButton, gridBagConstraints);
        backwardButton.getAccessibleContext().setAccessibleName("Go backward in time");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setLabelFor(forwardButton);
        jLabel2.setText("Click buttons to roll date forward or backward.");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        add(jLabel4, gridBagConstraints);

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(doneButton, gridBagConstraints);

        todayField.setColumns(8);
        todayField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 10, 10);
        add(todayField, gridBagConstraints);

        jLabel3.setText("Today is");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 5);
        add(jLabel3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void backwardButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backwardButtonMouseReleased
        backwardButtonDown = false;
        backwardThread.interrupt();
    }//GEN-LAST:event_backwardButtonMouseReleased

    private void backwardButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backwardButtonMousePressed
       backwardButtonDown = true;
       synchronized(backwardThread) { backwardThread.notify(); }
    }//GEN-LAST:event_backwardButtonMousePressed

    private void forwardButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardButtonMouseReleased
        forwardButtonDown = false;
        forwardThread.interrupt();
    }//GEN-LAST:event_forwardButtonMouseReleased

    private void forwardButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forwardButtonMousePressed
        forwardButtonDown = true;
        synchronized(forwardThread) { forwardThread.notify(); }
    }//GEN-LAST:event_forwardButtonMousePressed

    /** Set the date to "today" when first shown, and give focus to the
        roll forward button */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        setDate();
        todayField.requestFocus();
    }//GEN-LAST:event_formComponentShown

    /** Roll "today" forward */
    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_forwardButtonActionPerformed
    {//GEN-HEADEREND:event_forwardButtonActionPerformed
        SimpleDate.changeTodayBy(1);
        setDate();
    }//GEN-LAST:event_forwardButtonActionPerformed

    /** Roll "today" backward */
    private void backwardButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backwardButtonActionPerformed
    {//GEN-HEADEREND:event_backwardButtonActionPerformed
        SimpleDate.changeTodayBy(-1);
        setDate();
    }//GEN-LAST:event_backwardButtonActionPerformed

    /** Done diddling with the date */
    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_doneButtonActionPerformed
    {//GEN-HEADEREND:event_doneButtonActionPerformed
        GUI.getInstance().goBack();
    }//GEN-LAST:event_doneButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JButton forwardButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField todayField;
    // End of variables declaration//GEN-END:variables
    
    /** Set the displayed date to be the current value of the
     *  application's notion of "today"
     */
    private void setDate() 
    {
        todayField.setText(SimpleDate.getToday().toString());
    }
    
    // Associate a thread with the forward and backward buttons, which will
    // repeatedly "press" the button when it is held down by the use
    private boolean forwardButtonDown = false;
    private final Thread forwardThread = new Thread() {
        public void run()
        {
            while(true)
            {
              synchronized(this) { try { wait(); } catch(InterruptedException e) {} }
              try { sleep(INITIAL_BUTTON_WAIT); } catch(InterruptedException e) {}
              while(forwardButtonDown)
              {
                forwardButtonActionPerformed(null);
                try { sleep(BUTTON_INTERVAL); } catch(InterruptedException e) {}
              }
            }
          }
      };
    private boolean backwardButtonDown = false;
    private final Thread backwardThread = new Thread() {
        public void run()
        {
            while(true)
            {
              synchronized(this) { try { wait(); } catch(InterruptedException e) {} }
              try { sleep(INITIAL_BUTTON_WAIT); } catch(InterruptedException e) {}
              while(backwardButtonDown)
              {
                backwardButtonActionPerformed(null);
                try { sleep(BUTTON_INTERVAL); } catch(InterruptedException e) {}
              }
            }
          }
      };
      
    // Time intervals for repeated button press - in milliseconds
    private static final int INITIAL_BUTTON_WAIT = 1000;
    private static final int BUTTON_INTERVAL = 200;
}
